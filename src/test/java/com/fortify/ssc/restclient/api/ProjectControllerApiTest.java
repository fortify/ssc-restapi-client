/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.api;

import com.fortify.ssc.restclient.ApiException;
import com.fortify.ssc.restclient.model.ApiCollectionActionlong;
import com.fortify.ssc.restclient.model.ApiResult;
import com.fortify.ssc.restclient.model.ApiResultApiActionResponse;
import com.fortify.ssc.restclient.model.ApiResultApplicationNameTestResponse;
import com.fortify.ssc.restclient.model.ApiResultListProject;
import com.fortify.ssc.restclient.model.ApiResultProject;
import com.fortify.ssc.restclient.model.ApiActionResponse;
import com.fortify.ssc.restclient.model.ApplicationNameTestRequest;
import com.fortify.ssc.restclient.model.ApplicationNameTestResponse;
import com.fortify.ssc.restclient.model.Project;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Before;
import static org.junit.Assert.*;

import com.squareup.okhttp.mockwebserver.MockWebServer;
import com.squareup.okhttp.mockwebserver.MockResponse;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectControllerApi
 */
public class ProjectControllerApiTest {

    private final ProjectControllerApi api = new ProjectControllerApi();

    @Rule
    public MockWebServer mockBackend = new MockWebServer();


    /**
     * doCollectionAction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doCollectionActionProjectTest() throws ApiException {
        api.getApiClient().setBasePath(mockBackend.url("/ssc/api/v1").toString());
        mockBackend.enqueue(
                new MockResponse().setBody("{" +
                        "\"data\":{" +
                            "\"status\":\"success\"," +
                            "\"message\":\"Application search completed\"," +
                            "\"values\":{\"found\":false}" +
                        "}," +
                        "\"responseCode\":200" +
                    "}")
            );
        ApiCollectionActionlong apiCollAction = new ApiCollectionActionlong()
            .addIdsItem(1441L)
            .type(ApiCollectionActionlong.TypeEnum.REFRESH);
        ApiResultApiActionResponse response = api.doCollectionActionProject(apiCollAction);

        assertEquals("Application search completed", response.getData().getMessage());
        assertEquals(ApiActionResponse.StatusEnum.SUCCESS, response.getData().getStatus());
    }
    
    /**
     * list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectTest() throws ApiException {
        String fields = null;
        Integer start = null;
        Integer limit = null;
        String q = null;
        Boolean fulltextsearch = null;
        String orderby = null;

        api.getApiClient().setBasePath(mockBackend.url("/ssc/api/v1").toString());
        mockBackend.enqueue(
                new MockResponse().setBody("{\"data\": [" +
                            "{" +
                            "\"id\": 1441," +
                            "\"name\": \"APP_ONE\"," +
                            "\"description\": \"Description for APP_ONE\"," +
                            "\"creationDate\": \"2019-06-14T15:39:27.000+0000\"," +
                            "\"createdBy\": \"fortify_ci\"," +
                            "\"issueTemplateId\": null," +
                            "\"_href\": \"https://SERVER/ssc/api/v1/projects/1441\"" +
                            "}," +
                            "{" +
                              "\"id\": 1442," +
                              "\"name\": \"APP_TWO\"," +
                              "\"description\": \"Description for APP_TWO\"," +
                              "\"creationDate\": \"2019-06-14T15:46:50.000+0000\"," +
                              "\"createdBy\": \"fortify_ci\"," +
                              "\"issueTemplateId\": null," +
                              "\"_href\": \"https://SERVER/ssc/api/v1/projects/1442\"" +
                            "}" +
                        "]," +
                        "\"count\": 2," +
                        "\"responseCode\": 200" +
                    "}"));

        ApiResultListProject response = api.listProject(fields, start, limit, q, fulltextsearch, orderby);

        assertEquals(2L, response.getCount().longValue());
    }
    
    /**
     * read
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProjectTest() throws ApiException {
        api.getApiClient().setBasePath(mockBackend.url("/ssc/api/v1").toString());
        mockBackend.enqueue(
                new MockResponse().setBody("{" +
                        "\"data\":{" +
                                "\"id\": 1441," +
                                "\"name\": \"APP_ONE\"," +
                                "\"description\": \"Description for APP_ONE\"," +
                                "\"creationDate\": \"2019-06-14T15:39:27.000+0000\"," +
                                "\"createdBy\": \"fortify_ci\"," +
                                "\"issueTemplateId\": null," +
                                "\"_href\": \"https://SERVER/ssc/api/v1/projects/1441\"" +
                            "}," +
                        "\"responseCode\": 200" +
                        "}")
            );
        Long id = 1441L;
        String fields = "name,description";
        ApiResultProject response = api.readProject(id, fields);

        assertEquals("APP_ONE", response.getData().getName());
        assertEquals("Description for APP_ONE", response.getData().getDescription());
    }
    
    /**
     * test
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testProjectTest() throws ApiException {
        api.getApiClient().setBasePath(mockBackend.url("/ssc/api/v1").toString());
        mockBackend.enqueue(
                new MockResponse().setBody("{\"data\": {\"found\": true}, \"responseCode\": 200}")
            );
        ApplicationNameTestRequest testReq = new ApplicationNameTestRequest().applicationName("APP_ONE");
        ApiResultApplicationNameTestResponse response = api.testProject(testReq);

        assertTrue(response.getData().isFound());
    }
    
    /**
     * update
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        api.getApiClient().setBasePath(mockBackend.url("/ssc/api/v1").toString());
        mockBackend.enqueue(
                new MockResponse().setBody("{" +
                    "\"data\":{" +
                        "\"id\":1441," +
                        "\"name\":\"APP_ONE_ORIG\"," +
                        "\"description\":\"Stashed description for the former APP_ONE\"," +
                        "\"creationDate\":null," +
                        "\"createdBy\":null," +
                        "\"issueTemplateId\":null," +
                        "\"_href\":\"https://SERVER/ssc/api/v1/projects/1441\"" +
                    "}," +
                    "\"responseCode\":200," +
                    "\"links\":{" +
                        "\"versions\":{" +
                            "\"href\":\"https://SERVER/ssc/api/v1/projects/1441/versions\"" +
                        "}" +
                    "}" +
                "}")
            );
        Long id = 1441L;
        Project data = new Project().name("APP_ONE_ORIG").description("Stashed description for the former APP_ONE");
        ApiResultProject response = api.updateProject(id, data);

        assertEquals("APP_ONE_ORIG", response.getData().getName());
        assertEquals("Stashed description for the former APP_ONE", response.getData().getDescription());
    }
    
}
